// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LibraryManagement{
    
    address public owner;
    mapping(address => bool) public validMemberships;
    mapping(uint256 => bool) public availableBooks;
    mapping(address => uint256) public borrowedBooks;
    constructor() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }
     function registerMember(address member) public onlyOwner {
        validMemberships[member] = true;
    }
    function addBook(uint256 bookId) public onlyOwner {
        availableBooks[bookId] = true;
    }
    function borrowBook(uint256 bookId) public {
        require(validMemberships[msg.sender], "You must have a valid membership to borrow books");
        require(availableBooks[bookId], "Book is not available");

        availableBooks[bookId] = false;
        borrowedBooks[msg.sender] += 1;

        assert(!availableBooks[bookId]);
    }
    function returnBook(uint256 bookId) public {
        require(borrowedBooks[msg.sender] > 0, "You have no borrowed books to return");

        availableBooks[bookId] = true;
        borrowedBooks[msg.sender] -= 1;

         assert(availableBooks[bookId]);
    }
    function revokePrivileges(address member) public onlyOwner {
        if (borrowedBooks[member] > 0) {
           revert("Member has not returned all borrowed books");
        }

        validMemberships[member] = false;
    }
}
