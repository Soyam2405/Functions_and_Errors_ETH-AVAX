// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;               //compiler version must be greater than 8

contract modulefirst {               //creating the smart contract
    int256 public number;            //declaring a variable named number with datatype int256

    //Used to check for conditions that must be met before executing further code. 
    //It helps in validating inputs and access control
    function setNumber(int256 _inputNum) public {
        require(_inputNum != 0, "Number cannot be zero, should be greater than that");
        require(_inputNum > 0, "Number must be positive");

        number = _inputNum;
    }

    // function uses assert generally used for internal error checking and invariants.
    function assertExample(uint input_1, uint input_2) public pure returns (bool) {
        uint a = input_1;
        uint b = input_2;

        //checking if x equals y, if equals prints true. If not, the transaction will revert.
        assert(a == b);
        return true;
    }

    //function uses revert to explicitly revert the transaction if the condition is not met.
    //Explicitly triggers an error and reverts the transaction.
    function revertExample(uint _inputNumber) public pure returns (bool) {
        if (_inputNumber < 5) {
            revert("Number must be greater than or equal to 5");
        }
        return true;
    }
}
